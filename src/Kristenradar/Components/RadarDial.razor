@using System.Globalization
@using System.Reactive.Disposables
@implements IDisposable

<div @attributes="AdditionalAttributes">
    <svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet" viewBox="0 0 1600 900">
        <defs>
            <linearGradient id="dial-stroke">
                <stop class="stop1" offset="0%" />
                <stop class="stop2" offset="50%" />
                <stop class="stop3" offset="100%" />
            </linearGradient>
            <filter id="drop-shadow">
                <feDropShadow dx="0" dy="5" stdDeviation="10" flood-opacity="0.3" />
            </filter>
            <filter id="arrow-shadow">
                <feDropShadow dx="0" dy="0" stdDeviation="10" flood-opacity="0.5" />
            </filter>
        </defs>

        <path id="dial" d="M 150 800 a 650 650 0 0 1 1300 0" stroke-width="300" stroke="url(#dial-stroke)" fill="none" />

        <g filter="url(#drop-shadow)">
            <circle cx="1430" cy="680" r="100" fill="white" />
            <ellipse cx="1430" cy="550" rx="100" ry="15" stroke="white" stroke-width="10" fill="none" />
        </g>

        <g filter="url(#drop-shadow)">
            <circle cx="170" cy="680" r="100" fill="black" />
            <path d="M 120 620 q -50 -20 -20 -80 q 0 40 60 60 z" stroke="none" fill="black" />
            <path d="M 230 620 q 50 -20 20 -80 q 0 40 -60 60 z" stroke="none" fill="black" />
        </g>

        <path d="M 125 635 q -20 30 30 40 q 10 0 5 -5 q -10 -10 -20 -35 q -5 -10 -15 0" stroke="none" fill="red" />
        <path d="M 225 635 q 20 30 -30 40 q -10 0 -5 -5 q 10 -10 20 -35 q 5 -10 15 0" stroke="none" fill="red" />

        <g class="arrow@(isArrowVisible ? " show" : string.Empty) @(isWarning ? " blink" : string.Empty)" transform="rotate(@rotationAngle.ToString(CultureInfo.InvariantCulture))" transform-origin="800 800" filter="url(#arrow-shadow)">
            <path class="@(isWarning ? "shake" : string.Empty)" d="M 700 800 l 0 30 l -450 0 l 0 70 l -150 -100 l 150 -100 l 0 70 l 450 0" />
        </g>
    </svg>
</div>

@code {
    private double rotationAngle = 0;
    private bool isArrowVisible = true;
    private bool isWarning = false;
    private IDisposable? subscription;

    [Parameter]
    public double Minimum { get; set; } = 0;

    [Parameter]
    public double Maximum { get; set; } = 100;

    [Parameter]
    [EditorRequired]
    public required IObservable<double> Value { get; set; }

    [Parameter]
    public IObservable<bool>? IsArrowVisible { get; set; }

    [Parameter]
    public IObservable<bool>? IsWarning { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var subscriptions = new CompositeDisposable(Value.Subscribe(Value_OnNext));

        if (IsArrowVisible is not null)
        {
            subscriptions.Add(IsArrowVisible.Subscribe(IsArrowVisible_OnNext));
        }

        if (IsWarning is not null)
        {
            subscriptions.Add(IsWarning.Subscribe(IsWarning_OnNext));
        }

        subscription = subscriptions;
    }

    public void Dispose()
    {
        subscription?.Dispose();
        subscription = null;
    }

    private void Value_OnNext(double value)
    {
        var newValue = Math.Max(Math.Min(value, Maximum), Minimum);
        rotationAngle = newValue * 180 / (Maximum - Minimum);
        InvokeAsync(StateHasChanged);
    }

    private void IsArrowVisible_OnNext(bool value)
    {
        isArrowVisible = value;
        InvokeAsync(StateHasChanged);
    }

    private void IsWarning_OnNext(bool value)
    {
        isWarning = value;
        InvokeAsync(StateHasChanged);
    }
}
